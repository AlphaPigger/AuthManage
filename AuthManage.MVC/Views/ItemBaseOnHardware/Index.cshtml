
@{
    ViewData["Title"] = "硬件条目列表";
}

@model X.PagedList.IPagedList<AuthManage.Application.DTOModel.BusinessModel.ItemBaseOnHardwareDto>
@using X.PagedList.Mvc.Core

<div class="main sidebar-minified">
    <div class="panel panel-default">
        <div class="panel-heading">
            <strong class="strong">硬件条目列表</strong>
            <div class="panel-actions">
                @await Component.InvokeAsync("ItemBaseOnHardwareAdd")
            </div>
            <div class="panel-actions">
                <form action="~/ItemBaseOnHardware/Index" class="form-inline">
                    <span class="form-control" style="border:0px;margin-bottom:1px">每页指定记录数：</span>
                    @Html.TextBox("PageSize", ViewBag.PageSize as string, new { @class = "form-control", @style = "margin-top:-1px;width:150px;margin-right:20px", maxlength = 1, placeholder = "请输入分页记录数" })
                    <button type="submit" class="btn btn-default" style="padding-left:0px;padding-right:0px;margin-right:30px"><i class="glyphicon glyphicon-search"></i></button>
                </form>
            </div>
        </div>
        <div class="panel-body">
            <div style="overflow:scroll;">
                <table class="table table-bordered table-striped table-condensed table-hover">
                    <thead>
                        <tr>
                            <th class="text-center">
                                @Html.DisplayNameFor(m => Model.AsEnumerable().Single().Name)
                            </th>
                            <th class="text-center">
                                @Html.DisplayNameFor(m => Model.AsEnumerable().Single().Status)
                            </th>
                            <th class="text-center">
                                @Html.DisplayNameFor(m => Model.AsEnumerable().Single().UpdateTime)
                            </th>
                            <th class="text-center">
                                @Html.DisplayNameFor(m => Model.AsEnumerable().Single().UpdateUser)
                            </th>
                            <th class="text-center">
                                操作
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                        <tr>
                            <td class="text-center">
                                @Html.DisplayFor(m => item.Name)
                            </td>
                            <td class="text-center">
                                @if (item.Status == "未测试")
                                {
                                    <span style="color:blue">@item.Status</span>
                                }
                                else if (item.Status == "正常")
                                {
                                    <span style="color:green">@item.Status</span>
                                }
                                else if (item.Status == "异常")
                                {
                                    <span style="color:red">@item.Status</span>
                                }
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(m => item.UpdateTime)
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(m => item.UpdateUser)
                            </td>
                            <td class="text-center">
                                @*<a href="~/ItemBaseOnHardware/Edit/@item.ID" class="btn btn-info"><i class="glyphicon glyphicon-edit"></i></a>*@
                                @await Component.InvokeAsync("ItemBaseOnHardwareEdit", item.ID)
                                @await Component.InvokeAsync("ItemBaseOnHardwareDelete", item.ID)
                                <a onclick="Record(@item.ID)" class="btn btn-success" title="查看记录"><i class="glyphicon glyphicon-zoom-in"></i></a>
                            </td>
                        </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="14" style="margin-top:1px">
                                每页 @Model.PageSize 条记录，共 @Model.TotalItemCount 条记录&nbsp;&nbsp;&nbsp;&nbsp;第 @Model.PageNumber 页，共 @Model.PageCount 页
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, PageSize = ViewBag.PageSize }), new PagedListRenderOptions { LinkToFirstPageFormat = "首页", LinkToPreviousPageFormat = "上一页", LinkToNextPageFormat = "下一页", LinkToLastPageFormat = "末页", MaximumPageNumbersToDisplay = 5, DisplayItemSliceAndTotal = false })
        </div>
    </div>
</div>

<script type="text/javascript">
    function Record(ID) {
        //异步执行获取数据
        $.ajax({
            url: "/ItemBaseOnHardware/Record",
            type: "post",
            data: {
                "ItemBaseOnHardwareID": ID
            },
            success: function (data) {
                $("#Records").empty();
                var obj = JSON.parse(data);
                for (var i = 0; i < obj.length; i++) {
                    //向表格填充数据
                    var row = getDataRow(obj[i]);
                    $("#Records").append(row);
                }
                //调用模态框
                $("#myModal").modal();
            }
        });
    }

    function getDataRow(h)
    {
        var row = document.createElement('tr'); //创建行

        var td_updateUser = document.createElement('td');//创建第一列
        td_updateUser.innerHTML = h.UpdateUser;//填充数据
        row.appendChild(td_updateUser);//加入到行

        var td_updateTime = document.createElement('td'); //创建第二列
        td_updateTime.innerHTML = h.UpdateTime; 
        row.appendChild(td_updateTime); 

        var td_Status = document.createElement('td');//创建第三列
        td_Status.innerHTML = h.Status;
        row.appendChild(td_Status);

        var td_Remark = document.createElement('td');//创建第四列
        td_Remark.innerHTML = h.Remark;
        row.appendChild(td_Remark);

        return row; //返回tr数据	 
    }	  


    //删除操作
    function Delete() {
        var bool = confirm("确认删除吗？");
        return bool;
    }
</script>

<!--模态框，item显示记录-->
<div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">记录</h4>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered table-striped table-condensed table-hover">
                        <thead>
                            <tr>
                                <th>
                                    更改用户
                                </th>
                                <th>
                                    更改时间
                                </th>
                                <th>
                                    状态
                                </th>
                                <th>
                                    备注
                                </th>
                            </tr>
                        </thead>
                        <tbody id="Records">

                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
                </div>
            </div>
        </div>
</div>


